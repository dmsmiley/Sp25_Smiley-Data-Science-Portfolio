# Import necessary libraries:
# pandas: for data manipulation and analysis
# seaborn: for creating attractive and informative statistical graphics
# matplotlib.pyplot: for plotting graphs
# streamlit: for building interactive web applications
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import streamlit as st

# --------------------------------------------------------------------------------
# Load the dataset
# --------------------------------------------------------------------------------
# Read the Titanic dataset from a CSV file into a pandas DataFrame.
df = pd.read_csv("titanic.csv")

# --------------------------------------------------------------------------------
# Display summary statistics of the dataset
# --------------------------------------------------------------------------------
# st.write() outputs a title or text in the Streamlit app.
st.write("Summary Statistics")
# st.dataframe() displays a DataFrame; here we show summary statistics (e.g., mean, std, count) generated by df.describe().
st.dataframe(df.describe())

# --------------------------------------------------------------------------------
# Display the number of missing values by column
# --------------------------------------------------------------------------------
# st.write() outputs a title to introduce this section.
st.write("Number of Missing Values by Column")
# df.isnull().sum() computes the total number of missing (null) values in each column.
st.dataframe(df.isnull().sum())

# --------------------------------------------------------------------------------
# Create a heatmap to visualize missing values
# --------------------------------------------------------------------------------
# This heatmap visually represents missing data in the DataFrame.
st.write("Heatmap of Missing Values")
# Create a matplotlib figure and axes for the heatmap.
fig, ax = plt.subplots()
# sns.heatmap() plots a heatmap using the boolean mask (True for missing values).
# cmap="viridis" sets the color palette, and cbar=False hides the color bar.
sns.heatmap(df.isnull(), cmap="viridis", cbar=False)
# st.pyplot() renders the matplotlib figure in the Streamlit app.
st.pyplot(fig)

# --------------------------------------------------------------------------------
# Handle missing data interactively
# --------------------------------------------------------------------------------
# st.subheader() creates a subsection header in the app.
st.subheader("Handle Missing Data")

# Provide a selectbox widget to let users choose a numeric column from the DataFrame.
column = st.selectbox("Choose a column to fill", df.select_dtypes(include=['number']).columns)

# Provide radio buttons to choose a method for handling missing data.
# Available options:
# - "Original DF": Keep the dataset unchanged.
# - "Drop Rows": Remove rows with any missing values.
# - "Drop Columns (>50% Missing)": Remove columns where more than 50% of the data is missing.
# - "Impute Mean": Replace missing values with the mean of the selected column.
# - "Impute Median": Replace missing values with the median.
# - "Impute Zero": Replace missing values with zero.
method = st.radio("Choose a method", [
    "Original DF", 
    "Drop Rows", 
    "Drop Columns (>50% Missing)", 
    "Impute Mean", 
    "Impute Median", 
    "Impute Zero"
])

# Create a copy of the original DataFrame to preserve the original data.
df_clean = df.copy()  # This will be used for applying cleaning methods.

# Create two columns in the Streamlit layout for side-by-side visualizations:
# - col1: Display original data distribution.
# - col2: Display distribution after applying the selected missing data handling method.
col1, col2 = st.columns(2)

# Apply the selected missing data handling method:
if method == "Original DF":
    # Keep the DataFrame unchanged.
    df_clean = df_clean
elif method == "Drop Rows":
    # Remove any rows that contain missing values.
    df_clean = df_clean.dropna()
elif method == "Drop Columns (>50% Missing)":
    # Drop columns where more than 50% of the entries are missing.
    df_clean = df_clean.drop(columns=df_clean.columns[df_clean.isnull().mean() > 0.5])
elif method == "Impute Mean":
    # Fill missing values in the selected column with the column's mean.
    df_clean[column] = df_clean[column].fillna(df[column].mean())
elif method == "Impute Median":
    # Fill missing values in the selected column with the column's median.
    df_clean[column] = df_clean[column].fillna(df[column].median())
elif method == "Impute Zero":
    # Fill missing values in the selected column with zero.
    df_clean[column] = df_clean[column].fillna(0)

# --------------------------------------------------------------------------------
# Visualize the original data distribution and summary statistics
# --------------------------------------------------------------------------------
with col1:
    # Display a subheader for the original data distribution.
    st.subheader("Original Data Distribution")
    # Create a matplotlib figure for the histogram.
    fig, ax = plt.subplots()
    # Plot a histogram with a Kernel Density Estimate (KDE) for the selected column.
    # df[column].dropna() ensures that missing values are not plotted.
    sns.histplot(df[column].dropna(), kde=True)
    # Set the title of the plot to include the column name.
    plt.title(f"Original Distribution of {column}")
    # Render the plot in the Streamlit app.
    st.pyplot(fig)
    # Display summary statistics (e.g., count, mean, std) for the original column data.
    st.subheader(f"{column}'s OG summary stats")
    st.write(df[column].describe())

# --------------------------------------------------------------------------------
# Visualize the cleaned data distribution and summary statistics
# --------------------------------------------------------------------------------
with col2:
    # Display a subheader for the cleaned data distribution.
    st.subheader("Cleaned Data Distribution")
    # Create a new figure for the cleaned data histogram.
    fig, ax = plt.subplots()
    # Plot a histogram with a KDE for the selected column from the cleaned DataFrame.
    sns.histplot(df_clean[column], kde=True)
    # Set the title to show the column name and the missing data handling method applied.
    plt.title(f"Distribution of {column} after {method}")
    # Render the cleaned data plot in the app.
    st.pyplot(fig)
    # Display summary statistics for the cleaned column data.
    st.subheader(f"{column}'s New summary stats")
    st.write(df_clean[column].describe())